// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pais {
  id                  Int      @id @default(autoincrement())
  isoAlpha2           String   @db.VarChar(2)
  nome                String   @unique @db.VarChar(100)
  regiao              String   @db.VarChar(100)
  subRegiao           String   @db.VarChar(100)
  regiaoIntermediaria String?  @db.VarChar(100)
  lingua              String   @db.VarChar(50)
  capital             String   @db.VarChar(100)
  estado              Estado[]

	@@map("pais")
}

model Estado {
  id     Int      @id @default(autoincrement())
  nome   String   @unique @db.VarChar(100)
  sigla  String   @unique @db.VarChar(2)
  ativo  Boolean  @default(true) @db.Boolean
  paisId Int
  pais   Pais     @relation(fields: [paisId], references: [id])
  cidade Cidade[]

	@@map("estado")
}

model Cidade {
  id       Int     @id @default(autoincrement())
  nome     String  @unique @db.VarChar(100)
  estadoId Int
  estado   Estado  @relation(fields: [estadoId], references: [id])
  ativo    Boolean @default(true) @db.Boolean

	@@map("cidade")
}

model Endereco {
  id         Int              @id @default(autoincrement())
  cep        String           @db.VarChar(8)
  logradouro String           @db.VarChar(50)
  cidade     String           @db.VarChar(50)
  bairro     String           @db.VarChar(50)
  numero     String           @db.VarChar(5)
  UF         String           @db.VarChar(2)
  pais       String           @default("Brasil") @db.VarChar(50)
  paroquias  Paroquia[]
  pessoas    PessoaEndereco[]
  localidade localidade[]

	@@map("endereco")
}

model tipoCarisma {
  id            Int             @id @default(autoincrement())
  descricao     String          @unique @db.VarChar(30)
  pessoaCarisma pessoaCarisma[]
}

model estadoCivil {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(20)
  pessoas   Pessoa[]
}

model escolaridade {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(30)
  pessoas   Pessoa[]
}

enum Sexo {
  MASCULINO
  FEMININO
}

model Pessoa {
  id                   Int                @id @default(autoincrement())
  nome                 String             @db.VarChar(80)
  conhecidoPor         String?            @db.VarChar(30)
  sexo                 Sexo               @default(MASCULINO)
  cpf                  String?            @db.VarChar(11)
  nacionalidade        String             @db.VarChar(50)
  dataNascimento       DateTime?          @db.Date
  estadoCivilId        Int
  estadoCivil          estadoCivil        @relation(fields: [estadoCivilId], references: [id])
  foto                 String?
  escolaridadeId       Int?
  escolaridade         escolaridade?      @relation(fields: [escolaridadeId], references: [id])
  ativo                Boolean            @default(true)
  tipoPessoaId         Int                @default(1)
  tipoPessoa           TipoPessoa         @relation(fields: [tipoPessoaId], references: [id])
  passaportes          passaportePessoa[]
  contatos             pessoaContato[]
  paroquias            paroquiaPessoas[]
  casamentosComoMarido PessoaCasal[]      @relation("Marido")
  casamentosComoMulher PessoaCasal[]      @relation("Mulher")
  enderecos            PessoaEndereco[]
  equipes              equipePessoas[]
  pessoaCarisma        pessoaCarisma[]

	@@map("pessoa")
}

model TipoPessoa {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(40)
  pessoa    Pessoa[]

	@@map("tipoPessoa")
}

model PessoaEndereco {
  pessoaId   Int
  enderecoId Int
  pessoa     Pessoa   @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endereco   Endereco @relation(fields: [enderecoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([pessoaId, enderecoId])
	@@map("pessoaEndereco")
}

model PessoaCasal {
  id             Int    @id @default(autoincrement())
  pessoaMaridoId Int
  pessoaMulherId Int
  marido         Pessoa @relation("Marido", fields: [pessoaMaridoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mulher         Pessoa @relation("Mulher", fields: [pessoaMulherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pessoaMaridoId, pessoaMulherId])
	@@map("pessoaCasal")
}

model pessoaCarisma {
  pessoaId      Int
  tipoCarismaId Int
  pessoa        Pessoa      @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tipoCarisma   tipoCarisma @relation(fields: [tipoCarismaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([pessoaId, tipoCarismaId])
}

model passaportePessoa {
  id            Int       @id @default(autoincrement())
  pessoaId      Int
  numero        String
  dataExpiracao DateTime
  renovado      Boolean   @default(false)
  dataRenovacao DateTime?
  pessoa        Pessoa    @relation(fields: [pessoaId], references: [id], onDelete: Cascade)
}

model pessoaContato {
  id                  Int     @id @default(autoincrement())
  telefoneResidencial String?
  telefoneCelular     String?
  observacao          String?
  ativo               Boolean @default(true)
  email               String?
  pessoaId            Int
  pessoa              Pessoa  @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TipoDiocese {
  id        Int       @id @default(autoincrement())
  descricao String    @db.VarChar(50)
  dioceses  Diocese[]

	@@map("tipoDiocese")
}

model Diocese {
  id            Int          @id @default(autoincrement())
  tipoDioceseId Int
  tipoDiocese   TipoDiocese  @relation(fields: [tipoDioceseId], references: [id])
  descricao     String       @db.VarChar(90)
  paroquias     Paroquia[]
  localidade    localidade[]

	@@map("diocese")
}

model Paroquia {
  id         Int               @id @default(autoincrement())
  enderecoId Int
  dioceseId  Int
  endereco   Endereco          @relation(fields: [enderecoId], references: [id], onDelete: Cascade)
  diocese    Diocese           @relation(fields: [dioceseId], references: [id], onDelete: Restrict)
  descricao  String            @db.VarChar(50)
  pessoas    paroquiaPessoas[]
  
	@@map("paroquia")
}

model paroquiaPessoas {
  pessoaId   Int
  paroquiaId Int
  pessoa     Pessoa   @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paroquia   Paroquia @relation(fields: [paroquiaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([pessoaId, paroquiaId])
}

model etapa {
  id        Int    @id @default(autoincrement())
  descricao String @db.VarChar(50)
}

model regiao {
  id               Int                @id @default(autoincrement())
  descricao        String             @db.VarChar(50)
  macroRegiao      Boolean            @default(false)
  equipes          equipeRegiao[]
  localidadeRegiao localidadeRegiao[]
}

model tipoEquipe {
  id        Int                @id @default(autoincrement())
  descricao String             @db.VarChar(80)
  equipes   equipeTipoEquipe[]
}

model equipe {
  id            Int                @id @default(autoincrement())
  descricao     String             @db.VarChar(50)
  regioes       equipeRegiao[]
  equipePessoas equipePessoas[]
  tipos         equipeTipoEquipe[]
}

model equipeTipoEquipe {
  equipeId     Int
  tipoEquipeId Int
  equipe       equipe     @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  tipoEquipe   tipoEquipe @relation(fields: [tipoEquipeId], references: [id], onDelete: Restrict)

  @@id([equipeId, tipoEquipeId])
}

model equipeRegiao {
  equipeId Int
  regiaoId Int
  equipe   equipe @relation(fields: [equipeId], references: [id])
  regiao   regiao @relation(fields: [regiaoId], references: [id])

  @@id([equipeId, regiaoId])
}

model equipePessoas {
  equipeId Int
  pessoaId Int
  equipe   equipe @relation(fields: [equipeId], references: [id])
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id])

  @@id([equipeId, pessoaId])
}

model localidade {
  id               Int                @id @default(autoincrement())
  descricao        String             @db.VarChar(80)
  dioceseId        Int
  diocese          Diocese            @relation(fields: [dioceseId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tipoLocalidadeId Int
  tipoLocalidade   tipoLocalidade     @relation(fields: [tipoLocalidadeId], references: [id], onDelete: Restrict)
  observacao       String?
  enderecoId       Int
  endereco         Endereco           @relation(fields: [enderecoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  localidadeRegiao localidadeRegiao[]
}

model localidadeRegiao {
  localidadeId Int
  regiaoId     Int
  localidade   localidade @relation(fields: [localidadeId], references: [id], onDelete: Cascade)
  regiao       regiao     @relation(fields: [regiaoId], references: [id], onDelete: Restrict)

  @@id([localidadeId, regiaoId])
}

model tipoLocalidade {
  id         Int          @id @default(autoincrement())
  descricao  String       @db.VarChar(80)
  localidade localidade[]
}

enum Roles {
  ADMIN
  CATEQUISTA_NACIONAL
  CATEQUISTA_GRANDE_REGIAO
  CATEQUISTA_REGIAO
  CATEQUISTA_SETOR
  CATEQUISTA_PAROQUIA
  SECRETARIA_CNC
  SECRETARIA_PAROQUIA

	@@map("roles")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  password         String
  role             Roles    @default(SECRETARIA_PAROQUIA)
  whatsapp         String?  @db.VarChar(20)
  verifiedWhatsapp Boolean  @default(false)
  active           Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("user")
}
