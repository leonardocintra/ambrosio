// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["ambrosio"]
}

model pais {
  id                  Int      @id @default(autoincrement())
  isoAlpha2           String   @db.VarChar(2)
  nome                String   @unique @db.VarChar(100)
  regiao              String   @db.VarChar(100)
  subRegiao           String   @db.VarChar(100)
  regiaoIntermediaria String?  @db.VarChar(100)
  lingua              String   @db.VarChar(50)
  capital             String   @db.VarChar(100)
  estado              estado[]

  @@schema("ambrosio")
}

model estado {
  id     Int      @id @default(autoincrement())
  nome   String   @unique @db.VarChar(100)
  sigla  String   @unique @db.VarChar(2)
  ativo  Boolean  @default(true) @db.Boolean
  paisId Int
  pais   pais     @relation(fields: [paisId], references: [id])
  cidade cidade[]

  @@schema("ambrosio")
}

model cidade {
  id       Int        @id @default(autoincrement())
  nome     String     @unique @db.VarChar(100)
  estadoId Int
  estado   estado     @relation(fields: [estadoId], references: [id])
  ativo    Boolean    @default(true) @db.Boolean
  endereco endereco[]

  @@schema("ambrosio")
}

model endereco {
  id         Int              @id @default(autoincrement())
  cep        String           @db.VarChar(8)
  logradouro String           @db.VarChar(50)
  bairro     String           @db.VarChar(50)
  numero     String           @db.VarChar(5)
  cidadeId   Int              @default(1)
  cidade     cidade           @relation(fields: [cidadeId], references: [id])
  observacao String?          @db.VarChar(250)
  paroquias  paroquia[]
  pessoas    pessoaEndereco[]
  localidade localidade[]
  diocese    diocese[]

  @@schema("ambrosio")
}

model estadoCivil {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(20)
  pessoas   pessoa[]

  @@schema("ambrosio")
}

model escolaridade {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(30)
  pessoas   pessoa[]

  @@schema("ambrosio")
}

enum Sexo {
  MASCULINO
  FEMININO

  @@schema("ambrosio")
}

model pessoa {
  id                   Int                      @id @default(autoincrement())
  nome                 String                   @db.VarChar(80)
  conhecidoPor         String?                  @db.VarChar(30)
  sexo                 Sexo                     @default(MASCULINO)
  cpf                  String?                  @db.VarChar(11)
  nacionalidade        String                   @db.VarChar(50)
  dataNascimento       DateTime?                @db.Date
  estadoCivilId        Int
  estadoCivil          estadoCivil              @relation(fields: [estadoCivilId], references: [id])
  foto                 String?
  escolaridadeId       Int?
  escolaridade         escolaridade?            @relation(fields: [escolaridadeId], references: [id])
  ativo                Boolean                  @default(true)
  situacaoReligiosaId  Int
  situacaoReligiosa    situacaoReligiosa        @relation(fields: [situacaoReligiosaId], references: [id])
  passaportes          passaportePessoa[]
  contatos             pessoaContato[]
  casamentosComoMarido pessoaCasal[]            @relation("Marido")
  casamentosComoMulher pessoaCasal[]            @relation("Mulher")
  enderecos            pessoaEndereco[]
  carismasServico      pessoaCarismaServico[]
  carismasVinculado    pessoaCarismaVinculado[]
  carismasPrimitivo    pessoaCarismaPrimitivo[]

  @@schema("ambrosio")
}

model situacaoReligiosa {
  id        Int      @id @default(autoincrement())
  descricao String   @unique @db.VarChar(50)
  sexoUnico Sexo?
  pessoa    pessoa[]

  @@schema("ambrosio")
}

model tipoCarismaServico {
  id        Int                    @id @default(autoincrement())
  descricao String                 @unique @db.VarChar(80)
  pessoas   pessoaCarismaServico[]

  @@schema("ambrosio")
}

model tipoCarismaVinculado {
  id        Int                      @id @default(autoincrement())
  descricao String                   @unique @db.VarChar(80)
  pessoas   pessoaCarismaVinculado[]

  @@schema("ambrosio")
}

model tipoCarismaPrimitivo {
  id        Int                      @id @default(autoincrement())
  descricao String                   @unique @db.VarChar(80)
  pessoas   pessoaCarismaPrimitivo[]

  @@schema("ambrosio")
}

model pessoaCarismaServico {
  pessoaId             Int
  tipoCarismaServicoId Int
  pessoa               pessoa             @relation(fields: [pessoaId], references: [id], onDelete: Cascade)
  tipoCarismaServico   tipoCarismaServico @relation(fields: [tipoCarismaServicoId], references: [id], onDelete: Cascade)

  @@id([pessoaId, tipoCarismaServicoId])
  @@schema("ambrosio")
}

model pessoaCarismaVinculado {
  pessoaId               Int
  tipoCarismaVinculadoId Int
  pessoa                 pessoa               @relation(fields: [pessoaId], references: [id], onDelete: Cascade)
  tipoCarismaVinculado   tipoCarismaVinculado @relation(fields: [tipoCarismaVinculadoId], references: [id], onDelete: Cascade)

  @@id([pessoaId, tipoCarismaVinculadoId])
  @@schema("ambrosio")
}

model pessoaCarismaPrimitivo {
  pessoaId               Int
  tipoCarismaPrimitivoId Int
  pessoa                 pessoa               @relation(fields: [pessoaId], references: [id], onDelete: Cascade)
  tipoCarismaPrimitivo   tipoCarismaPrimitivo @relation(fields: [tipoCarismaPrimitivoId], references: [id], onDelete: Cascade)

  @@id([pessoaId, tipoCarismaPrimitivoId])
  @@schema("ambrosio")
}

model pessoaEndereco {
  pessoaId   Int
  enderecoId Int
  pessoa     pessoa   @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endereco   endereco @relation(fields: [enderecoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([pessoaId, enderecoId])
  @@schema("ambrosio")
}

model pessoaCasal {
  id             Int    @id @default(autoincrement())
  pessoaMaridoId Int
  pessoaMulherId Int
  marido         pessoa @relation("Marido", fields: [pessoaMaridoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mulher         pessoa @relation("Mulher", fields: [pessoaMulherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pessoaMaridoId, pessoaMulherId])
  @@schema("ambrosio")
}

model passaportePessoa {
  id            Int       @id @default(autoincrement())
  pessoaId      Int
  numero        String
  dataExpiracao DateTime
  renovado      Boolean   @default(false)
  dataRenovacao DateTime?
  pessoa        pessoa    @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  @@schema("ambrosio")
}

model pessoaContato {
  id                  Int     @id @default(autoincrement())
  telefoneResidencial String?
  telefoneCelular     String?
  observacao          String?
  ativo               Boolean @default(true)
  email               String?
  pessoaId            Int
  pessoa              pessoa  @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("ambrosio")
}

model tipoDiocese {
  id        Int       @id @default(autoincrement())
  descricao String    @db.VarChar(50)
  dioceses  diocese[]

  @@schema("ambrosio")
}

model diocese {
  id            Int          @id @default(autoincrement())
  tipoDioceseId Int
  tipoDiocese   tipoDiocese  @relation(fields: [tipoDioceseId], references: [id])
  descricao     String       @db.VarChar(90)
  enderecoId    Int
  endereco      endereco     @relation(fields: [enderecoId], references: [id], onDelete: Restrict)
  paroquias     paroquia[]
  localidade    localidade[]

  @@schema("ambrosio")
}

model paroquia {
  id         Int      @id @default(autoincrement())
  enderecoId Int
  dioceseId  Int
  endereco   endereco @relation(fields: [enderecoId], references: [id], onDelete: Restrict)
  diocese    diocese  @relation(fields: [dioceseId], references: [id], onDelete: Restrict)
  descricao  String   @db.VarChar(50)

  @@schema("ambrosio")
}

model etapa {
  id        Int    @id @default(autoincrement())
  descricao String @db.VarChar(50)

  @@schema("ambrosio")
}

model tipoEquipe {
  id        Int    @id @default(autoincrement())
  descricao String @db.VarChar(80)

  @@schema("ambrosio")
}

model localidade {
  id               Int            @id @default(autoincrement())
  descricao        String         @db.VarChar(80)
  dioceseId        Int
  diocese          diocese        @relation(fields: [dioceseId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tipoLocalidadeId Int
  tipoLocalidade   tipoLocalidade @relation(fields: [tipoLocalidadeId], references: [id], onDelete: Restrict)
  observacao       String?
  enderecoId       Int
  endereco         endereco       @relation(fields: [enderecoId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("ambrosio")
}

model tipoLocalidade {
  id         Int          @id @default(autoincrement())
  descricao  String       @db.VarChar(80)
  localidade localidade[]

  @@schema("ambrosio")
}

enum roles {
  ADMIN
  CATEQUISTA_NACIONAL
  CATEQUISTA_GRANDE_REGIAO
  CATEQUISTA_REGIAO
  CATEQUISTA_SETOR
  CATEQUISTA_PAROQUIA
  SECRETARIA_CNC
  SECRETARIA_PAROQUIA
  NAO_IDENTIFICADO

  @@schema("ambrosio")
}

model user {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  password         String
  role             roles    @default(NAO_IDENTIFICADO)
  whatsapp         String?  @db.VarChar(20)
  verifiedWhatsapp Boolean  @default(false)
  active           Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@schema("ambrosio")
}

model setor {
  id            Int         @id @default(autoincrement())
  descricao     String      @db.VarChar(50)
  macroRegiaoId Int
  macroRegiao   macroRegiao @relation(fields: [macroRegiaoId], references: [id], onDelete: Restrict)
  ativo         Boolean     @default(true)

  @@schema("ambrosio")
}

model macroRegiao {
  id        Int     @id @default(autoincrement())
  descricao String  @db.VarChar(50)
  ativo     Boolean @default(true)
  setor     setor[]

  @@schema("ambrosio")
}
